package com.wipro.jdbcdemo;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

public class JdbcEmployeeInsert {
	// --- IMPORTANT: REPLACE THESE WITH YOUR ACTUAL ORACLE DATABASE DETAILS ---
    // Example TNS connection string: "jdbc:oracle:thin:@//localhost:1521/XEPDB1"
    // Example SID connection string: "jdbc:oracle:thin:@localhost:1521:XE"
    private static final String DB_URL = "jdbc:oracle:thin:@localhost:3306:XE";
    private static final String DB_USER = "root";
    private static final String DB_PASSWORD = "Krishna@18";
    // -------------------------------------------------------------------------

    public static void main(String[] args) {
        Connection connection = null;
        try {
            // Step 1: Load the Oracle JDBC driver
            Class.forName("oracle.jdbc.driver.OracleDriver");
            System.out.println("Oracle JDBC Driver loaded.");

            // Step 2: Establish a connection to the database
            connection = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
            connection.setAutoCommit(false); // Start transaction for multiple inserts
            System.out.println("Connection to Oracle database established successfully.");

            // Step 3: Create the employee table
            createEmployeeTable(connection);

            // Step 4: Insert sample records
            System.out.println("\nInserting employee records...");
            insertEmployee(connection, "rama krishna", "IT");
            insertEmployee(connection, "Dhonni", "cricketer");
            

            connection.commit(); // Commit the transaction
            System.out.println("All inserts committed successfully.");

            // Step 5: Verify inserted data (optional, but good for demonstration)
            queryEmployeeData(connection);

        } catch (ClassNotFoundException e) {
            System.err.println("Oracle JDBC Driver not found. Make sure ojdbc7.jar is in your classpath and correctly installed in Maven: " + e.getMessage());
        } catch (SQLException e) {
            System.err.println("Database error: " + e.getMessage());
            System.err.println("SQL State: " + e.getSQLState());
            System.err.println("Error Code: " + e.getErrorCode());
            try {
                if (connection != null) {
                    connection.rollback(); // Rollback in case of error
                    System.err.println("Transaction rolled back.");
                }
            } catch (SQLException rollbackEx) {
                System.err.println("Error during rollback: " + rollbackEx.getMessage());
            }
        } finally {
            // Step 6: Close resources
            if (connection != null) {
                try {
                    connection.close();
                    System.out.println("Connection closed.");
                } catch (SQLException e) {
                    System.err.println("Error closing connection: " + e.getMessage());
                }
            }
        }
    }

    /**
     * Creates the 'employee' table if it doesn't exist.
     * Uses Oracle 12c+ IDENTITY column for auto-incrementing primary key.
     *
     * @param conn The database connection.
     * @throws SQLException if a database access error occurs.
     */
    private static void createEmployeeTable(Connection conn) throws SQLException {
        String dropTableSQL = "DROP TABLE employee CASCADE CONSTRAINTS"; // Drop if exists for clean runs
        // Oracle 12c+ syntax for auto-incrementing primary key
        String createTableSQL = "CREATE TABLE employee (" +
                                "id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY," +
                                "emp_name VARCHAR2(45) NOT NULL," +
                                "department VARCHAR2(45) NOT NULL)";
        try (Statement stmt = conn.createStatement()) {
            try {
                stmt.execute(dropTableSQL);
                System.out.println("Existing table 'employee' dropped.");
            } catch (SQLException e) {
                // ORA-00942: table or view does not exist - ignore if table doesn't exist
                if (e.getErrorCode() != 942) {
                    throw e;
                }
            }
            stmt.execute(createTableSQL);
            System.out.println("Table 'employee' created.");
        }
    }

    /**
     * Inserts a new employee record into the 'employee' table.
     *
     * @param conn The database connection.
     * @param empName The name of the employee.
     * @param department The department of the employee.
     * @throws SQLException if a database access error occurs.
     */
    private static void insertEmployee(Connection conn, String empName, String department) throws SQLException {
        // SQL statement for inserting data. ID is auto-generated.
        String sql = "INSERT INTO employee(emp_name, department) VALUES(?, ?)";
        try (PreparedStatement pstmt = conn.prepareStatement(sql)) {
            pstmt.setString(1, empName);
            pstmt.setString(2, department);
            int rowsAffected = pstmt.executeUpdate();
            System.out.println(rowsAffected + " row(s) inserted for " + empName);
        }
    }

    /**
     * Queries and prints all records from the 'employee' table.
     *
     * @param conn The database connection.
     * @throws SQLException if a database access error occurs.
     */
    private static void queryEmployeeData(Connection conn) throws SQLException {
        String sql = "SELECT id, emp_name, department FROM employee ORDER BY id";
        try (Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery(sql)) {

            System.out.println("\n--- Employee Data ---");
            while (rs.next()) {
                int id = rs.getInt("id");
                String empName = rs.getString("emp_name");
                String department = rs.getString("department");
                System.out.println("ID: " + id + ", Name: " + empName + ", Department: " + department);
            }
            System.out.println("---------------------");
        }
    }
}
